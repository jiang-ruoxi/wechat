package app

import (
	"bytes"
	"encoding/json"
	"github.com/gin-gonic/gin"
	"io/ioutil"
	"log"
	"net/http"
	"wechat/common"
	"wechat/global"
	"wechat/utils"
)

type RequestData struct {
	HTs        string `json:"h_ts"`
	HM         int64  `json:"h_m"`
	Zone       int32  `json:"zone"`
	HLc        string `json:"h_lc"`
	Uid        int64  `json:"uid"`
	Token      string `json:"token"`
	HCn        string `json:"h_cn"`
	HDt        int32  `json:"h_dt"`
	Cate       int32  `json:"cate"`
	Atype      int32  `json:"atype"`
	Source     int32  `json:"source"`
	Offset     int32  `json:"offset"`
	Difficulty int32  `json:"difficulty"`
}

func ApiEnglishBookList(c *gin.Context) {
	offset := utils.GetIntParamItem("offset", 0, c)
	typeId := utils.GetIntParamItem("type_id", 1, c)

	// 创建要发送的数据
	data := RequestData{
		HTs:        "1685021025740e",
		HM:         28800,
		Zone:       0,
		HLc:        "zh",
		Uid:        0,
		Token:      "",
		HCn:        "miniprogram",
		HDt:        3,
		Cate:       1,
		Atype:      3,
		Source:     4,
		Offset:     int32(offset),
		Difficulty: int32(typeId),
	}

	// 将数据编码为 JSON 格式
	jsonData, err := json.Marshal(data)
	if err != nil {
		log.Fatalf("Error encoding JSON: %v", err)
	}

	// 创建 POST 请求
	url := "https://www.ipalfish.com/klian/ugc/picturebook/level/list"
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		log.Fatalf("Error creating request: %v", err)
	}

	// 设置请求头
	req.Header.Set("Content-Type", "application/json")

	// 发送请求
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatalf("Error sending request: %v", err)
	}
	defer resp.Body.Close()

	// 读取响应
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Error reading response: %v", err)
	}

	var contentResult AutoGeneratedE
	if err := json.Unmarshal(body, &contentResult); err != nil {
		return
	}

	common.ReturnResponse(global.SUCCESS, map[string]interface{}{
		"data": contentResult.Data,
	}, global.SUCCESS_MSG, c)
}

type RequestDataInfo struct {
	HTs    string `json:"h_ts"`
	HM     int64  `json:"h_m"`
	Zone   int32  `json:"zone"`
	HLc    string `json:"h_lc"`
	Uid    int64  `json:"uid"`
	Token  string `json:"token"`
	HCH    string `json:"h_ch"`
	HDt    int32  `json:"h_dt"`
	Cate   int32  `json:"cate"`
	Did    string `json:"did"`
	HDid   string `json:"h_did"`
	Atype  int32  `json:"atype"`
	BookId int    `json:"bookid"`
	Limit  int    `json:"limit"`
}

func ApiEnglishBookInfo(c *gin.Context) {
	bookId := utils.GetIntParamItem("book_id", 1, c)
	// 创建要发送的数据
	data := RequestDataInfo{
		HDt:    3,
		HDid:   "16851689799320000",
		Did:    "16851689799320000",
		HCH:    "miniprogram",
		HTs:    "1685168991352",
		HM:     0,
		Zone:   28800,
		Token:  "",
		HLc:    "zh",
		Cate:   1,
		Atype:  3,
		BookId: bookId,
		Limit:  200,
	}

	// 将数据编码为 JSON 格式
	jsonData, err := json.Marshal(data)
	if err != nil {
		log.Fatalf("Error encoding JSON: %v", err)
	}

	// 创建 POST 请求
	url := "https://www.ipalfish.com/klian/ugc/picturebook/official/product/bookid/page/list"
	req, err := http.NewRequest("POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		log.Fatalf("Error creating request: %v", err)
	}

	// 设置请求头
	req.Header.Set("Content-Type", "application/json")

	// 发送请求
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		log.Fatalf("Error sending request: %v", err)
	}
	defer resp.Body.Close()

	// 读取响应
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("Error reading response: %v", err)
	}

	var contentResult AutoGeneratedInfo
	if err := json.Unmarshal(body, &contentResult); err != nil {
		return
	}

	common.ReturnResponse(global.SUCCESS, map[string]interface{}{
		"data": contentResult.Data,
	}, global.SUCCESS_MSG, c)
}

type AutoGeneratedE struct {
	Ret  int `json:"ret"`
	Data struct {
		Ent struct {
			Items  []interface{} `json:"items"`
			More   bool          `json:"more"`
			Offset int           `json:"offset"`
		} `json:"ent"`
		Ext struct {
			Difficultyinfos []struct {
				Difficulty int    `json:"difficulty"`
				Name       string `json:"name"`
				Level      int    `json:"level"`
				Color      string `json:"color"`
				Status     int    `json:"status"`
				Count      int    `json:"count"`
				Bgimg      string `json:"bgimg"`
			} `json:"difficultyinfos"`
			Guidetext     string `json:"guidetext"`
			Isshowexplain bool   `json:"isshowexplain"`
			Levelinfo     struct {
				Level int    `json:"level"`
				Count int    `json:"count"`
				Name  string `json:"name"`
			} `json:"levelinfo"`
			Pkroute            string      `json:"pkroute"`
			Publishids         interface{} `json:"publishids"`
			Readids            interface{} `json:"readids"`
			Totalbookcn        int         `json:"totalbookcn"`
			Userdifficultyinfo struct {
				UID          int `json:"uid"`
				Difficulty   int `json:"difficulty"`
				Readcount    int `json:"readcount"`
				Publishcount int `json:"publishcount"`
			} `json:"userdifficultyinfo"`
		} `json:"ext"`
	} `json:"data"`
}

type AutoGeneratedInfo struct {
	Ret  int `json:"ret"`
	Data struct {
		Ent struct {
			Items []struct {
				Bookid  int64 `json:"bookid"`
				Pageid  int64 `json:"pageid"`
				Index   int   `json:"index"`
				Picture struct {
					Tiny   string `json:"tiny"`
					Origin string `json:"origin"`
					W      int    `json:"w"`
					H      int    `json:"h"`
				} `json:"picture"`
				Ct               int         `json:"ct"`
				Ut               int         `json:"ut"`
				State            int         `json:"state"`
				Text             string      `json:"text"`
				Picturev2        interface{} `json:"picturev2"`
				Flag             int         `json:"flag"`
				Topicstate       int         `json:"topicstate"`
				Ext              string      `json:"ext"`
				Recordtext       string      `json:"recordtext"`
				Translation      string      `json:"translation"`
				Hasteach         bool        `json:"hasteach"`
				Hasrecord        bool        `json:"hasrecord"`
				TextPinyin       string      `json:"textPinyin"`
				RecordtextPinyin string      `json:"recordtextPinyin"`
				IsOpenLp         bool        `json:"is_open_lp"`
				IsOpenRp         bool        `json:"is_open_rp"`
				BgPicture        string      `json:"bg_picture"`
				Scoretext        string      `json:"scoretext"`
			} `json:"items"`
			Offset         int  `json:"offset"`
			More           bool `json:"more"`
			Readpagecn     int  `json:"readpagecn"`
			Isshowvipguide bool `json:"isshowvipguide"`
		} `json:"ent"`
		Ext struct {
			Adpic    string `json:"adpic"`
			Adrouter string `json:"adrouter"`
			Bookinfo struct {
				Bookid int64  `json:"bookid"`
				Level  int    `json:"level"`
				Title  string `json:"title"`
				Cover  struct {
					Tiny   string `json:"tiny"`
					Origin string `json:"origin"`
					W      int    `json:"w"`
					H      int    `json:"h"`
				} `json:"cover"`
				Ct                int         `json:"ct"`
				Ut                int         `json:"ut"`
				State             int         `json:"state"`
				Domain            string      `json:"domain"`
				Downloads         int         `json:"downloads"`
				Resid             int         `json:"resid"`
				Screen            int         `json:"screen"`
				Top               int         `json:"top"`
				Flag              int         `json:"flag"`
				Playcount         int         `json:"playcount"`
				Pagecount         int         `json:"pagecount"`
				Score             int         `json:"score"`
				Version           int         `json:"version"`
				Lock              int         `json:"lock"`
				Recordstate       int         `json:"recordstate"`
				Topicstate        int         `json:"topicstate"`
				Vocabulary        int         `json:"vocabulary"`
				Difficulty        int         `json:"difficulty"`
				Isvip             bool        `json:"isvip"`
				Isstoproll        bool        `json:"isstoproll"`
				Topicid           int64       `json:"topicid"`
				Topicbookindex    int         `json:"topicbookindex"`
				Vipbubble         bool        `json:"vipbubble"`
				Newbubble         bool        `json:"newbubble"`
				Recordbubble      bool        `json:"recordbubble"`
				Onlinetime        int         `json:"onlinetime"`
				Readbubble        bool        `json:"readbubble"`
				Themeinfos        interface{} `json:"themeinfos"`
				Notinpicgallery   bool        `json:"notinpicgallery"`
				Tags              []string    `json:"tags"`
				Words             []string    `json:"words"`
				Introduction      string      `json:"introduction"`
				Voicetype         int         `json:"voicetype"`
				Pressid           int         `json:"pressid"`
				Booktype          int         `json:"booktype"`
				Illustrator       string      `json:"illustrator"`
				Translator        string      `json:"translator"`
				Writer            string      `json:"writer"`
				Bgm               string      `json:"bgm"`
				Firstclassifyid   int         `json:"firstclassifyid"`
				Secondclassifyid  int         `json:"secondclassifyid"`
				Paytype           int         `json:"paytype"`
				Sort              int         `json:"sort"`
				Levellist         interface{} `json:"levellist"`
				Createrid         int         `json:"createrid"`
				Lastupdateid      int         `json:"lastupdateid"`
				Avescore          int         `json:"avescore"`
				Learnlink         []int       `json:"learnlink"`
				Reprice           int         `json:"reprice"`
				Bookprice         string      `json:"bookprice"`
				Difficultyname    string      `json:"difficultyname"`
				Explainvideo      string      `json:"explainvideo"`
				Listenvideo       string      `json:"listenvideo"`
				Explainvideostate int         `json:"explainvideostate"`
				Listenvideostate  int         `json:"listenvideostate"`
				BgPicture         string      `json:"bg_picture"`
			} `json:"bookinfo"`
			Cwrouter    string `json:"cwrouter"`
			Endtext     string `json:"endtext"`
			Evaluations []struct {
				Recordid   int64 `json:"recordid"`
				Totalscore struct {
					Content string `json:"content"`
					Score   int    `json:"score"`
					Rank    int    `json:"rank"`
					Index   int    `json:"index"`
					Startts int    `json:"startts"`
					Endts   int    `json:"endts"`
				} `json:"totalscore"`
				Wordscore []struct {
					Content string `json:"content"`
					Score   int    `json:"score"`
					Rank    int    `json:"rank"`
					Index   int    `json:"index"`
					Startts int    `json:"startts"`
					Endts   int    `json:"endts"`
				} `json:"wordscore"`
				Productid int64 `json:"productid"`
				Ut        int   `json:"ut"`
			} `json:"evaluations"`
			Isconfirm      bool `json:"isconfirm"`
			Isshowvipguide bool `json:"isshowvipguide"`
			Productinfo    struct {
				Productid   int64 `json:"productid"`
				Bookid      int64 `json:"bookid"`
				UID         int   `json:"uid"`
				State       int   `json:"state"`
				Ct          int   `json:"ct"`
				Ut          int   `json:"ut"`
				Playcount   int   `json:"playcount"`
				Likecount   int   `json:"likecount"`
				Islike      bool  `json:"islike"`
				Publishtime int   `json:"publishtime"`
				Producttype int   `json:"producttype"`
				Score       int   `json:"score"`
				Rank        int   `json:"rank"`
				Iscollect   bool  `json:"iscollect"`
				Dt          int   `json:"dt"`
				Scene       int   `json:"scene"`
			} `json:"productinfo"`
			Readpagecn int `json:"readpagecn"`
			Records    []struct {
				Recordid  int64  `json:"recordid"`
				Productid int64  `json:"productid"`
				URL       string `json:"url"`
				Ct        int    `json:"ct"`
				Ut        int    `json:"ut"`
				Pageid    int64  `json:"pageid"`
				Duration  int    `json:"duration"`
				Bookid    int64  `json:"bookid"`
				Rawurl    string `json:"rawurl"`
			} `json:"records"`
			Route        string `json:"route"`
			Sharecontent string `json:"sharecontent"`
			Users        []struct {
				ID          int    `json:"id"`
				Name        string `json:"name"`
				Avatar      string `json:"avatar"`
				Gender      int    `json:"gender"`
				Sign        string `json:"sign"`
				Regtype     int    `json:"regtype"`
				Cate        int    `json:"cate"`
				Birthday    int    `json:"birthday"`
				Origavatar  string `json:"origavatar"`
				Audiobrief  string `json:"audiobrief"`
				Audiolength int    `json:"audiolength"`
				Ct          int    `json:"ct"`
				Rt          int    `json:"rt"`
				Country     string `json:"country"`
				Govold      int    `json:"govold"`
				Rmk         string `json:"rmk"`
				Gov         int    `json:"gov"`
				Title       string `json:"title"`
				Source      int    `json:"source"`
				Juniortitle string `json:"juniortitle"`
				Enname      string `json:"enname"`
				Iseligible  bool   `json:"iseligible"`
				State       int    `json:"state"`
				Fullname    struct {
					Firstname  string `json:"firstname"`
					Familyname string `json:"familyname"`
					Middlename string `json:"middlename"`
					Status     int    `json:"status"`
				} `json:"fullname"`
				Puid     string `json:"puid"`
				Agelevel string `json:"agelevel"`
			} `json:"users"`
		} `json:"ext"`
	} `json:"data"`
}
